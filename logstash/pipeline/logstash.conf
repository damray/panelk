input {
	syslog {
		port => 5514
		type => syslog
		timezone => "Europe/Paris"
		tags => "PAN-OS_syslog" 
	}
}

filter {
    if "PAN-OS_syslog" in [tags] {

        # Log types are "TRAFFIC", "THREAT", "CONFIG", "SYSTEM" "GLOBALPROTECT" and "HIP-MATCH".

        # Traffic log fields: https://docs.paloaltonetworks.com/pan-os/9-0/pan-os-admin/monitoring/use-syslog-for-monitoring/syslog-field-descriptions/traffic-log-fields.html

        if ([message] =~ /TRAFFIC/) {
            csv {
                source => "message"
                columns => [ 
                 "FUTUR_USE", "ReceiveTime", "SerialNumber", "Type", "Threat_ContentType","FUTUR_USE", "GeneratedTime", "SourceIP", "DestinationIP", "NATSourceIP", "NATDestinationIP", "RuleName","SourceUser", "DestinationUser",
                 "Application", "VirtualSystem", "SourceZone", "DestinationZone","InboundInterface", "OutboundInterface", "LogAction", "FUTURE_USE", "SessionID", "RepeatCount", "SourcePort", "DestinationPort", "NATSourcePort", "NATDestinationPort",
                 "Flags","Protocol", "Action", "Bytes", "BytesSent", "BytesReceived", "Packets", "StartTime", "ElapsedTime", "Category", "FUTURE_USE", "SequenceNumber", "ActionFlags", "SourceLocation", "DestinationLocation", "FUTURE_USE",
                 "PacketsSent", "PacketsReceived", "SessionEndReason", "DeviceGroupHierarchyLevel1", "DeviceGroupHierarchyLevel2", "DeviceGroupHierarchyLevel3", "DeviceGroupHierarchyLevel4", "VirtualSystemName", "DeviceName", "ActionSource",
                 "SourceVMUUID", "DestinationVMUUID", "TunnelID_IMSI", "MonitorTag_IMEI", "ParentSessionID", "ParentStartTime","TunnelType", "SCTPAssociationID", "SCTPChunks", "SCTPChunksSent", "SCTPChunksReceived", "UUIDRule","HHTP2Connection"
                ]
            }
            mutate {
                convert => [ "Bytes", "integer" ]
                convert => [ "BytesReceived", "integer" ]
                convert => [ "BytesSent", "integer" ]
                convert => [ "ElapsedTime", "integer" ]
                convert => [ "GeoIP.dma_code", "integer" ]
                convert => [ "GeoIP.latitude", "float" ]
                convert => [ "GeoIP.longitude", "float" ]
                convert => [ "NATDestinationPort", "integer" ]
                convert => [ "NATSourcePort", "integer" ]
                convert => [ "Packets", "integer" ]
                convert => [ "PacketsReceived", "integer" ]
                convert => [ "PacketsSent", "integer" ]
                convert => [ "SequenceNumber", "integer" ]
                add_tag => [ "PAN-OS_traffic"]
            }
        }

        # Threat log fields: https://docs.paloaltonetworks.com/pan-os/9-0/pan-os-admin/monitoring/use-syslog-for-monitoring/syslog-field-descriptions/threat-log-fields.html
        else if ([message] =~ /THREAT/) {
            csv {
                source => "message"
                columns => [ 
                    "FUTURE_USE", "ReceiveTime", "SerialNumber", "Type", "Threat_ContentType", "FUTURE_USE",
                    "GeneratedTime", "SourceIP", "DestinationIP", "NATSourceIP", "NATDestinationIP", "RuleName", 
                    "SourceUser", "DestinationUser", "Application", "VirtualSystem", "SourceZone", "DestinationZone",
                    "InboundInterface", "OutboundInterface", "LogAction", "FUTURE_USE", "SessionID",
                    "RepeatCount", "SourcePort", "DestinationPort", "NATSourcePort", "NATDestinationPort", "Flags",
                    "Protocol", "Action", "URL_Filename", "ThreatID", "Category", "Severity", "Direction",
                    "SequenceNumber", "ActionFlags", "SourceLocation", "DestinationLocation", "FUTURE_USE", 
                    "ContentType", "PCAP_ID", "FileDigest", "Cloud", "URLIndex", "UserAgent", "FileType",
                    "X-Forwarded-For", "Referer", "Sender", "Subject", "Recipient", "ReportID",
                    "DeviceGroupHierarchyLevel1", "DeviceGroupHierarchyLevel2", "DeviceGroupHierarchyLevel3",
                    "DeviceGroupHierarchyLevel4", "VirtualSystemName", "DeviceName", "FUTURE_USE", "SourceVMUUID",
                    "DestinationVMUUID", "HTTPMethod", "TunnelID_IMSI", "MonitorTag_IMEI", "ParentSessionID", 
                    "ParentStartTime", "TunnelType", "ThreatCategory", "ContentVersion", "FUTURE_USE" , 
                    "SCTPAssociationID", "PayloadProtocolID", "HTTPHeaders" 
                ]
            }
            mutate {
                convert => [ "GeoIP.dma_code", "integer" ]
                convert => [ "GeoIP.latitude", "float" ]
                convert => [ "GeoIP.longitude", "float" ]
                convert => [ "NATDestinationPort", "integer" ]
                convert => [ "NATSourcePort", "integer" ]
                convert => [ "SequenceNumber", "integer" ]
                add_tag => ["PAN-OS_threat"]
            }
        }
	    else if ([message] =~ /CONFIG/) {
	        csv {
		        source => "message"
		        columns => [
		            "FUTURE_USE", "Receive Time", "Serial Number", "Type", "Subtype", "FUTURE_USE", "GeneratedTime", "Host",
		            "Virtual System", "Command", "Admin", "Client", "Result", "Configuration Path", "Before Change Detail",
		            "After Change Detail", "Sequence Number", "Action Flags", "Device Group Hierarchy Level 1",
		            "Device Group Hierarchy Level 2", "Device Group Hierarchy Level 3", "Device Group Hierarchy Level 4", 
		            "Virtual System Name", "Device Name"
		        ]
	        }
            mutate {
                add_tag => [ "PAN-OS_Config"]
            }
        }
	    else if ([message] =~ /SYSTEM/) {
	        csv {
		        source => "message"
		        columns => [
		            "FUTURE_USE", "ReceiveTime", "SerialNumber", "Type", "Threat_ContentType", "FUTURE_USE", "GeneratedTime",
		            "VirtualSystem", "EventID", "Object", "FUTURE_USE", "FUTURE_USE", "Module", "Severity", "Description",
		            "SequenceNumber", "ActionFlags", "Device Group Hierarchy Level 1", "Device Group Hierarchy Level 2", 
		            "Device Group Hierarchy Level 3", "Device Group Hierarchy Level 4", "VirtualSystemName", "DeviceName"
		        ]
	        }
            mutate {
                add_tag => [ "PAN-OS_System"]
            }
            # for panos version 8.0 to 9.0
            if ([EventID] == "globalprotectgateway-config-succ") {
                grok {
                    match => {"Description" => "GlobalProtect%{SPACE}%{WORD:GP-VPNType}%{SPACE}(user|client)%{SPACE}%{WORD:GP-EventAction}%{SPACE}%{WORD:GP-EventResult}.%{SPACE}User%{SPACE}name:%{SPACE}%{WORD:GP-USERNAME},%{SPACE}Config%{SPACE}name:%{SPACE}%{NOTSPACE:GP-CONFIG},%{SPACE}Private%{SPACE}IP:%{SPACE}%{IP:GP-PRIVIP},%{SPACE}%{SPACE}Client%{SPACE}region:%{SPACE}%{GREEDYDATA:GP-SourceRegion},%{SPACE}Client%{SPACE}IP:%{SPACE}%{IP:SourceIP},%{SPACE}Client%{SPACE}version:%{SPACE}%{GREEDYDATA:GP-Client-Version},%{SPACE}Device%{SPACE}name:%{SPACE}%{GREEDYDATA:GP-Device},%{SPACE}Client%{SPACE}OS%{SPACE}version:%{SPACE}%{GREEDYDATA:GP-OS-version},%{SPACE}VPN%{SPACE}type:%{SPACE}%{GREEDYDATA:GP-VPN-type}"}
                }
                mutate {
                    remove_tag => [ "PAN-OS_System" ]
                    add_tag => [ "PAN-OS_GP" ]
                    add_tag => [ "GP_Start" ]
                    convert => [ "GeoIP.dma_code", "integer" ]
                    convert => [ "GeoIP.latitude", "float" ]
                    convert => [ "GeoIP.longitude", "float" ]
                }
                date {
                    match => ["GeneratedTime", "yyyy/MM/dd HH:mm:ss"]
                    target => "startedVPN"
                }
            }
            if ([EventID] == "globalprotectgateway-config-release") {
                grok {
                    match => {"Description" => "GlobalProtect%{SPACE}%{WORD:GP-VPNType}%{SPACE}(user|client)%{SPACE}%{WORD:GP-EventAction}%{SPACE}%{WORD:GP-EventResult}.%{SPACE}User%{SPACE}name:%{SPACE}%{WORD:GP-USERNAME},%{SPACE}Private%{SPACE}IP:%{SPACE}%{IP:GP-PRIVIP},%{SPACE}Client%{SPACE}version:%{SPACE}%{GREEDYDATA:GP-Client-Version},%{SPACE}Device%{SPACE}name:%{SPACE}%{GREEDYDATA:GP-Device},%{SPACE}Client%{SPACE}OS%{SPACE}version:%{SPACE}%{GREEDYDATA:GP-OS-version},%{SPACE}VPN%{SPACE}type:%{SPACE}%{GREEDYDATA:GP-VPN-type}"}
                }
                elasticsearch {
                    hosts => [ "elasticsearch" ]
                    user => "elastic"
                    password => "changeme"
                    index => "panos-gp"
                    query => "EventID.keyword:globalprotectgateway-config-succ AND GP-PRIVIP:%{[GP-PRIVIP]}"
                    fields => { "startedVPN" => "startedVPN" }
                    tag_on_failure => "not-find"
                    }
                date {
                    match => ["GeneratedTime", "yyyy/MM/dd HH:mm:ss"]
                    target => "endVPN"
                    }
                ruby { code => 'event.set("connected", Time.iso8601(event.get("[startedVPN]").to_s).to_f)' }
                ruby { code => 'event.set("disconnected", Time.iso8601(event.get("[endVPN]").to_s).to_f)' }
                ruby { code => 'event.set("duration", disconnected - connected)' }
                mutate {
                    remove_tag => [ "PAN-OS_System" ]
                    remove_tag => [ "GP_start"]
                    add_tag => [ "PAN-OS_GP_release" ]
                    add_tag => [ "GP_End" ]
                }
            }
            if ([EventID] == "globalprotectgateway-logout-succ") {
                grok {
                    match => {"Description" => "GlobalProtect%{SPACE}%{WORD:GP-VPNType}%{SPACE}(user|client)%{SPACE}%{WORD:GP-EventAction}%{SPACE}%{WORD:GP-EventResult}.%{SPACE}User%{SPACE}name:%{SPACE}%{WORD:GP-USERNAME},%{SPACE}Client%{SPACE}OS%{SPACE}version:%{SPACE}%{GREEDYDATA:GP-Client-Version},%{SPACE}Reason:%{SPACE}%{GREEDYDATA:GP-REASON}."}
                }
                mutate {
                    remove_tag => [ "PAN-OS_System" ]
                    add_tag => [ "PAN-OS_GP" ]
                    add_tag => [ "GP_End" ]
                }
            }
        }
        # for version 9.1
        else if ([message] =~ /GLOBALPROTECT/) {
            csv {
                source => "message"
                columns => [
                    "FUTURE_USE", "ReceiveTime", "SerialNumber", "SequenceNumber", "ActionFlags", "Type", "Threat_ContentType",
                    "ConfigVersion", "GeneratedTime", "VirtualSystem", "EventID", "Stage", "Auth_Method", "Tunnel_Type", 
                    "SourceUser", "SourceRegion", "MachineName", "SourceIP", "PublicIPv6", "PrivateIP", "PrivateIPv6",
                    "HostID", "AgentSerialNumber", "ClientVersion", "ClientOS", "ClientOSVersion", "RepeatCount", "Reason",
                    "Error", "Description", "Status", "Location", "LoginDuration", "ConnectMethod", "ErrorCode", "Portal"
                ]
            }
            mutate {
                add_tag => [ "PAN-OS_GP"]
            }
        }
        mutate {
            # Original message has been fully parsed, so remove it.
            remove_field => [ "message" ]
        }
        # Geolocate logs that have SourceIP if that SourceIP is a non-RFC1918 address
        if [SourceIP] and [SourceIP] !~ "(^127\.0\.0\.1)|(^10\.)|(^172\.1[6-9]\.)|(^172\.2[0-9]\.)|(^172\.3[0-1]\.)|(^192\.168\.)|(^169\.254\.)" {
            geoip {
               source => "SourceIP"
               target => "SourceIPGeo"
          }

            # Delete 0,0 in SourceIPGeo.location if equal to 0,0
            if ([SourceIPGeo.location] and [SourceIPGeo.location] =~ "0,0") {
                mutate {
                    replace => [ "SourceIPGeo.location", "" ]
                }
            }
        }
        # Geolocate logs that have DestinationIP and if that DestinationIP is a non-RFC1918 address
        if [DestinationIP] and [DestinationIP] !~ "(^127\.0\.0\.1)|(^10\.)|(^172\.1[6-9]\.)|(^172\.2[0-9]\.)|(^172\.3[0-1]\.)|(^192\.168\.)|(^169\.254\.)" {
            geoip {
                source => "DestinationIP"
                target => "DestinationIPGeo"
            }
      
            # Delete 0,0 in DestinationIPGeo.location if equal to 0,0
            if ([DestinationIPGeo.location] and [DestinationIPGeo.location] =~ "0,0") {
                mutate {
                    replace => [ "DestinationIPGeo.location", "" ]
                }
            }
        }

        # Takes the 5-tuple of source address, source port, destination address, destination port, and protocol and does a SHA1 hash to fingerprint the flow.  This is a useful
        # way to be able to do top N terms queries on flows, not just on one field.
        if [SourceIP] and [DestinationIP] {
            fingerprint {
                concatenate_sources => true
                method => "SHA1"
                key => "logstash"
                source => [ "SourceIP", "SourcePort", "DestinationIP", "DestinationPort", "Protocol" ]
            }
        }

    }
}

output {

    if "PAN-OS_traffic" in [tags] {
        elasticsearch {
            index => "panos-traffic"
            hosts => [ 'elasticsearch' ]
	        user => "elastic"
	        password => "changeme"
        }
    }

    else if "PAN-OS_threat" in [tags] {
        elasticsearch {
            index => "panos-threat"
            hosts => [ 'elasticsearch' ]
	        user => "elastic"
            password => "changeme"
        }
    }
    else if "PAN-OS_Config" in [tags] {
        elasticsearch {
            index => "panos-config"
            hosts => [ 'elasticsearch' ]
            user => "elastic"
            password => "changeme"
        }
    }
    else if "PAN-OS_System" in [tags] {
        elasticsearch {
            index => "panos-system"
            hosts => [ 'elasticsearch' ]
            user => "elastic"
            password => "changeme"
        }
    }
    else if "PAN-OS_GP" in [tags] {
        elasticsearch {
            index => "panos-gp"
            hosts => [ 'elasticsearch' ]
            user => "elastic"
            password => "changeme"
        }
    }
        else if "PAN-OS_GP_release" in [tags] {
        elasticsearch {
            index => "panos-gp"
            hosts => [ 'elasticsearch' ]
            user => "elastic"
            password => "changeme"
        }
    }
}
